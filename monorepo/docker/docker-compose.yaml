version: '2'
services:
  kafdrop:
    container_name: kafdrop
    image: obsidiandynamics/kafdrop
    restart: 'no'
    ports:
      - '9000:9000'
    environment:
      KAFKA_BROKERCONNECT: 'kafka:29092'
      JVM_OPTS: '-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify'
    depends_on:
      - 'kafka'

  kafka:
    container_name: kafka
    image: obsidiandynamics/kafka
    restart: 'no'
    ports:
      - '2181:2181'
      - '9092:9092'
    environment:
      KAFKA_LISTENERS: 'INTERNAL://:29092,EXTERNAL://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka:29092,EXTERNAL://localhost:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: '6000'
      KAFKA_RESTART_ATTEMPTS: '10'
      KAFKA_RESTART_DELAY: '5'
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: '0'
      MAX_MESSAGE_BYTES: '1048576'

  mongo-keys:
    container_name: mongo-keys
    image: depop/openssl-bats
    volumes:
      - mongo-keys:/mongo-conf
    command: 'bash -c "openssl rand -base64 741 > /mongo-conf/mongodb-keyfile; chmod 600 /mongo-conf/mongodb-keyfile; chown 999 /mongo-conf/mongodb-keyfile"'

  mongo-replica-setup:
    container_name: mongo-setup
    env_file:
      - ./.env
    image: mongo
    restart: always
    volumes:
    - ./docker-entrypoint-initdb.d/mongo-setup.sh:/docker-entrypoint-initdb.d/mongo-setup.sh
    entrypoint: ["bash", "/docker-entrypoint-initdb.d/mongo-setup.sh" ]
    env_file:
        - .env
    environment:
        MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
        MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    depends_on:
        - mongodb
  
  mongodb:
    container_name: mongodb
    env_file:
      - ./.env
    image: mongo
    restart: always
    ports:
      - '${MONGO_PORT}:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo-keys:/opt/keyfile
      - db_data:/data/db
      - ./docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      test: test $$(echo "rs.initiate().ok || rs.status().ok" | mongosh -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --quiet) -eq 1
      interval: 10s
      start_period: 30s
    command:
      [
        '--replSet',
        'rs0',
        '--bind_ip_all',
        '--keyFile',
        '/opt/keyfile/mongodb-keyfile',
      ]

  mysql-auth:
    container_name: mysql-auth
    image: mysql
    cap_add:
      - SYS_NICE
    restart: always
    environment:
      MYSQL_DATABASE: '${DB_AUTH_DATABASE}'
      MYSQL_USER: '${DB_AUTH_USERNAME}'
      MYSQL_PASSWORD: '${DB_AUTH_PASSWORD}'
      MYSQL_ROOT_PASSWORD: '${DB_ROOT_PASSWORD}'
      MYSQL_ROOT_HOST: '%'
    ports:
      - '${DB_AUTH_PORT}:3306'
    volumes:
      - mysql_db_auth:/var/lib/mysql
      - ./docker-entrypoint-initdb.d/init.sql:/docker-entrypoint-initdb.d/init.sql

  mysql-prod-mgmt:
    container_name: mysql-prod-mgmt
    image: mysql
    cap_add:
      - SYS_NICE
    restart: always
    environment:
      MYSQL_DATABASE: '${DB_PROD_MGMT_DATABASE}'
      MYSQL_USER: '${DB_PROD_MGMT_USER}'
      MYSQL_PASSWORD: '${DB_PROD_MGMT_PASSWORD}'
      MYSQL_ROOT_PASSWORD: '${DB_ROOT_PASSWORD}'
      MYSQL_ROOT_HOST: '%'
    ports:
      - '${DB_PROD_MGMT_PORT}:3306'
    volumes:
      - mysql_db_prod_mgmt:/var/lib/mysql
      - ./docker-entrypoint-initdb.d/init.sql:/docker-entrypoint-initdb.d/init.sql
volumes:
  db_data:
    driver: local
  mysql_db_auth:
    driver: local
  mysql_db_prod_mgmt:
    driver: local
  mongo-keys:
